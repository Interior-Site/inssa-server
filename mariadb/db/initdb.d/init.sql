DROP TABLE IF EXISTS USER;

CREATE TABLE USER (
	USER_ID			VARCHAR(50)		NOT NULL						COMMENT '회원아이디',
	EMAIL			VARCHAR(100)	NOT NULL						COMMENT '회원이메일',
	NICKNAME		VARCHAR(100)	NOT NULL						COMMENT '회원닉네임',
	PHONE			VARCHAR(100)	NOT NULL						COMMENT '회원휴대폰번호',
	PASSWORD		VARCHAR(100)	NOT NULL						COMMENT '회원비밀번호',
	STATUS			VARCHAR(50)		NOT NULL	DEFAULT 'Y'			COMMENT '정상 : Y / 탈퇴 : N',
	IMG				VARCHAR(300)		NULL						COMMENT '회원프로필사진경로',
	REGDATE			DATE			NOT NULL	DEFAULT SYSDATE()	COMMENT '회원가입일',
	QUIT			DATE				NULL						COMMENT '회원탈퇴일',
	SOCIAL			VARCHAR(50)		NOT NULL						COMMENT '일반 : I / 카카오톡 : K / 네이버 : N / 구글 : G',
	TYPE			VARCHAR(50)			NULL						COMMENT '일반 : G / 업체 : C / 관리자 : Z'
);

DROP TABLE IF EXISTS CATEGORY;

CREATE TABLE CATEGORY (
	BOARD_CATEGORY		CHAR(5)	NOT NULL	COMMENT '게시판별 카테고리',
	CATEGORY_HOME		CHAR(5)	NOT NULL	COMMENT '아파트 : A / 빌라 : V / 오피스텔 : O / 다세대 : M / 독립 : I',
	CATEGORY_REVIEW		CHAR(5)	NOT NULL	COMMENT '시공 후기 : BUILD / 견적 후기 : QUOTE / 기타 후기 : ETC',
	CATEGORY_INTERIOR	CHAR(5)	NOT NULL	COMMENT 'ALL수리: ALL /  베란다 확장 : VER / 부엌 : KIT / 거실 : LIV / 도배,장판 : WALL / 기타 : ETC',
	CATEGORY_COST		CHAR(5)	NOT NULL	COMMENT '0~300 : 300 / 300~500 : 500 / 500~1000 : 1000 / 1000~2000 : 2000 / 2000~3000 : 3000 / 3000이상 : 9999',
	BOARD_NO			INT		NOT NULL	COMMENT '게시글번호'
);

DROP TABLE IF EXISTS COMMENT;

CREATE TABLE COMMENT (
	COMMENT_NO		INT				NOT NULL						COMMENT '게시글 댓글번호',
	COMMENT_CONTENT	VARCHAR(1000)	NOT NULL						COMMENT '게시글 내용',
	COMMENT_STATUS	CHAR(1)			NOT NULL	DEFAULT 'Y'			COMMENT '삭제된 경우 N로 변경',
	COMMENT_DATE	DATE			NOT NULL	DEFAULT SYSDATE()	COMMENT '댓글이 작성된 날짜',
	COMMENT_IMG		VARCHAR(500)		NULL						COMMENT 'png/jpg/gif 만 가능',
	BOARD_NO		INT				NOT NULL						COMMENT '댓글이 달린 게시글번호',
	USER_NO			INT				NOT NULL						COMMENT '댓글을 작성한 회원번호'
);

DROP TABLE IF EXISTS COMPANY;

CREATE TABLE COMPANY (
	COM_NO			INT				NOT NULL				COMMENT '업체고유번호',
	COM_REGNO		VARCHAR(100)	NOT NULL				COMMENT '사업자등록번호',
	COM_NM			VARCHAR(100)	NOT NULL				COMMENT '업체명',
	COM_PHONE		VARCHAR(100)	NOT NULL				COMMENT '업체전화번호',
	COM_ORNPHONE	VARCHAR(100)	NOT NULL				COMMENT '업체대표자전화번호',
	COM_STATUS		VARCHAR(50)		NOT NULL	DEFAULT 'Y'	COMMENT '운영 : Y / 삭제 : N',
	COM_GRANTSTATUS	CHAR(1)			NOT NULL	DEFAULT 'N'	COMMENT '승인 : Y / 미승인 : N',
	COM_STAR		CHAR(1)				NULL				COMMENT '1~5',
	USER_NO			INT				NOT NULL				COMMENT '업체를 가진 회원번호'
);

DROP TABLE IF EXISTS BOARD_LIKE;

CREATE TABLE BOARD_LIKE (
	LIKE_NO		INT		NOT NULL						COMMENT '게시글 좋아요번호',
	LIKE_STATUS	CHAR(1)	NOT NULL	DEFAULT 'N'			COMMENT '좋아요 처리 되었을 경우 Y로 변경',
	LIKE_DATE	DATE	NOT NULL	DEFAULT SYSDATE()	COMMENT '좋아요가 눌린 날짜',
	BOARD_NO	INT		NOT NULL						COMMENT '좋아요가 눌린 게시글 번호',
	USER_NO		INT		NOT NULL						COMMENT '좋아요를 누른 회원번호'
);

DROP TABLE IF EXISTS ZZIM;

CREATE TABLE ZZIM (
	ZZIM_NO		INT		NOT NULL						COMMENT '게시글 찜번호',
	ZZIM_DATE	DATE	NOT NULL	DEFAULT SYSDATE()	COMMENT '찜하기 눌린 날짜',
	ZZIM_STATUS	CHAR(1)	NOT NULL	DEFAULT 'N'			COMMENT '찜 처리 되었을 경우 Y로 변경',
	BOARD_NO	INT		NOT NULL						COMMENT '찜하기 눌린 게시글 번호',
	USER_NO		INT		NOT NULL						COMMENT '찜하기 누른 회원번호'
);

DROP TABLE IF EXISTS BOARD;

CREATE TABLE BOARD (
	BOARD_NO		INT				NOT NULL						COMMENT '게시글번호',
	BOARD_NAME		VARCHAR(50)		NOT NULL						COMMENT 'ex) 후기, 문의 기타 ...',
	BOARD_GUBUN		CHAR(5)			NOT NULL						COMMENT 'ex) 후기 : R / 문의 : A ...',
	BOARD_TITLE		VARCHAR(100)	NOT NULL	DEFAULT 'Y'			COMMENT '게시글제목',
	BOARD_CONTENT	VARCHAR(5000)	NOT NULL						COMMENT '게시글내용',
	BOARD_REGDATE	DATE			NOT NULL	DEFAULT SYSDATE()	COMMENT '게시글 작성한 날짜',
	BOARD_CHGDATE	DATE				NULL						COMMENT '게시글 수정한 날짜',
	BOARD_STATUS	CHAR(1)			NOT NULL	DEFAULT 'Y'			COMMENT '삭제될 경우 N으로 변경됨',
	BOARD_VIEW		INT				NOT NULL	DEFAULT 0			COMMENT '게시글조회수',
	BOARD_NOTICE	CHAR(1)			NOT NULL	DEFAULT 'N'			COMMENT '공지사항일 경우 Y로 변경됨',
	USER_NO			INT				NOT NULL						COMMENT '회원고유번호'
);

DROP TABLE IF EXISTS REPLY;

CREATE TABLE REPLY (
	REPLY_NO		INT				NOT NULL						COMMENT '답글번호',
	REPLY_TITLE		VARCHAR(500)	NOT NULL						COMMENT '답글제목',
	REPLY_CONTENT	VARCHAR(1000)	NOT NULL						COMMENT '답글내용',
	REPLY_REGDATE	DATE			NOT NULL	DEFAULT SYSDATE()	COMMENT '답글작성일',
	REPLY_CHGDATE	DATE				NULL						COMMENT '답글 수정일',
	REPLY_STATUS	CHAR(1)			NOT NULL	DEFAULT 'Y'			COMMENT '삭제될 경우 N으로 변경',
	REPLY_VIEW		INT				NOT NULL						COMMENT '조회될 때마다 +1됨',
	REPLY_IMG		VARCHAR(500)		NULL						COMMENT 'png/jpg/gif 만 가능',
	BOARD_NO		INT				NOT NULL						COMMENT '답글이 달린 부모 게시글번호',
	USER_NO			INT				NOT NULL						COMMENT '답글을 작성한 회원번호'
);

DROP TABLE IF EXISTS FILE;

CREATE TABLE FILE (
	FILE_NO			INT				NOT NULL						COMMENT '파일번호',
	FILE_PATH		VARCHAR(500)	NOT NULL						COMMENT '파일저장경로',
	FILE_SAVE_NM	VARCHAR(200)	NOT NULL						COMMENT '파일서버에 저장될 파일명',
	FILE_ORG_NM		VARCHAR(200)	NOT NULL						COMMENT '로컬에 저장된 원본파일명',
	FILE_LEVEL		CHAR(20)		NOT NULL						COMMENT '파일을 등록한 순서',
	FILE_REGDATE	DATE			NOT NULL	DEFAULT SYSDATE()	COMMENT '파일등록일',
	BOARD_NO		INT				NOT NULL						COMMENT '게시글번호'
);

DROP TABLE IF EXISTS REPLY_LIKE;

CREATE TABLE REPLY_LIKE (
	REPLY_LI_NO		INT		NOT NULL						COMMENT '답글좋아요번호',
	REPLY_LI_STATUS	CHAR(1)	NOT NULL	DEFAULT 'N'			COMMENT '좋아요 처리된 경우 Y로 변경',
	REPLY_LI_DATE	DATE	NOT NULL	DEFAULT SYSDATE()	COMMENT '답글에 좋아요 눌린 날짜',
	REPLY_NO		INT		NOT NULL						COMMENT '좋아요 눌린 답글번호',
	USER_NO			INT		NOT NULL						COMMENT '답글에 좋아요 누른 회원번호'
);

DROP TABLE IF EXISTS REPLY_ZZIM;

CREATE TABLE REPLY_ZZIM (
	REPLY_ZZ_NO		INT		NOT NULL						COMMENT '답글찜하기번호',
	REPLY_ZZ_DATE	DATE	NOT NULL	DEFAULT SYSDATE()	COMMENT '답글에 찜하기 눌린 날짜',
	REPLY_ZZ_STATUS	CHAR(1)	NOT NULL	DEFAULT 'N'			COMMENT '찜 눌렸을 경우 Y로 변경',
	REPLY_NO		INT		NOT NULL						COMMENT '찜하기 눌린 답글번호',
	USER_NO			INT		NOT NULL						COMMENT '답글에 찜누른 회원번호'
);

DROP TABLE IF EXISTS REPLY_COMMENT;

CREATE TABLE REPLY_COMMENT (
	REPLY_CO_NO			INT				NOT NULL						COMMENT '답글댓글번호',
	REPLY_CO_CONTENT	VARCHAR(1000)	NOT NULL						COMMENT '답글댓글내용',
	REPLY_CO_STATUS		CHAR(1)			NOT NULL	DEFAULT 'Y'			COMMENT '삭제된 경우 N로 변경',
	REPLY_CO_DATE		DATE			NOT NULL	DEFAULT SYSDATE()	COMMENT '답글에 댓글이 작성된 날짜',
	REPLY_CO_IMG		VARCHAR(500)		NULL						COMMENT 'png/jpg/gif만 가능',
	REPLY_NO			INT				NOT NULL						COMMENT '댓글달린 답글번호',
	USER_NO				INT				NOT NULL						COMMENT '답글에 댓글 작성한 회원번호'
);

ALTER TABLE USER ADD CONSTRAINT PK_USER PRIMARY KEY (
	USER_ID
);

ALTER TABLE CATEGORY ADD CONSTRAINT PK_CATEGORY PRIMARY KEY (
	BOARD_CATEGORY
);

ALTER TABLE COMMENT ADD CONSTRAINT PK_COMMENT PRIMARY KEY (
	COMMENT_NO
);

ALTER TABLE COMPANY ADD CONSTRAINT PK_COMPANY PRIMARY KEY (
	COM_NO
);

ALTER TABLE BOARD_LIKE ADD CONSTRAINT PK_BOARD_LIKE PRIMARY KEY (
	LIKE_NO
);

ALTER TABLE ZZIM ADD CONSTRAINT PK_ZZIM PRIMARY KEY (
	ZZIM_NO
);

ALTER TABLE BOARD ADD CONSTRAINT PK_BOARD PRIMARY KEY (
	BOARD_NO
);

ALTER TABLE REPLY ADD CONSTRAINT PK_REPLY PRIMARY KEY (
	REPLY_NO
);

ALTER TABLE FILE ADD CONSTRAINT PK_FILE PRIMARY KEY (
	FILE_NO
);

ALTER TABLE REPLY_LIKE ADD CONSTRAINT PK_REPLY_LIKE PRIMARY KEY (
	REPLY_LI_NO
);

ALTER TABLE REPLY_ZZIM ADD CONSTRAINT PK_REPLY_ZZIM PRIMARY KEY (
	REPLY_ZZ_NO
);

ALTER TABLE REPLY_COMMENT ADD CONSTRAINT PK_REPLY_COMMENT PRIMARY KEY (
	REPLY_CO_NO
);

ALTER TABLE CATEGORY ADD CONSTRAINT FK_BOARD_TO_CATEGORY_1 FOREIGN KEY (
	BOARD_NO
)
REFERENCES BOARD (
	BOARD_NO
);

ALTER TABLE COMMENT ADD CONSTRAINT FK_BOARD_TO_COMMENT_1 FOREIGN KEY (
	BOARD_NO
)
REFERENCES BOARD (
	BOARD_NO
);

ALTER TABLE COMMENT ADD CONSTRAINT FK_USER_TO_COMMENT_1 FOREIGN KEY (
	USER_ID
)
REFERENCES USER (
	USER_ID
);

ALTER TABLE COMPANY ADD CONSTRAINT FK_USER_TO_COMPANY_1 FOREIGN KEY (
	USER_ID
)
REFERENCES USER (
	USER_ID
);

ALTER TABLE BOARD_LIKE ADD CONSTRAINT FK_BOARD_TO_LIKE_1 FOREIGN KEY (
	BOARD_NO
)
REFERENCES BOARD (
	BOARD_NO
);

ALTER TABLE BOARD_LIKE ADD CONSTRAINT FK_USER_TO_LIKE_1 FOREIGN KEY (
	USER_ID
)
REFERENCES USER (
	USER_ID
);

ALTER TABLE ZZIM ADD CONSTRAINT FK_BOARD_TO_ZZIM_1 FOREIGN KEY (
	BOARD_NO
)
REFERENCES BOARD (
	BOARD_NO
);

ALTER TABLE ZZIM ADD CONSTRAINT FK_USER_TO_ZZIM_1 FOREIGN KEY (
	USER_ID
)
REFERENCES USER (
	USER_ID
);

ALTER TABLE BOARD ADD CONSTRAINT FK_USER_TO_BOARD_1 FOREIGN KEY (
	USER_ID
)
REFERENCES USER (
	USER_ID
);

ALTER TABLE REPLY ADD CONSTRAINT FK_BOARD_TO_REPLY_1 FOREIGN KEY (
	BOARD_NO
)
REFERENCES BOARD (
	BOARD_NO
);

ALTER TABLE REPLY ADD CONSTRAINT FK_USER_TO_REPLY_1 FOREIGN KEY (
	USER_ID
)
REFERENCES USER (
	USER_ID
);

ALTER TABLE FILE ADD CONSTRAINT FK_BOARD_TO_FILE_1 FOREIGN KEY (
	BOARD_NO
)
REFERENCES BOARD (
	BOARD_NO
);

ALTER TABLE REPLY_LIKE ADD CONSTRAINT FK_REPLY_TO_REPLY_LIKE_1 FOREIGN KEY (
	REPLY_NO
)
REFERENCES REPLY (
	REPLY_NO
);

ALTER TABLE REPLY_LIKE ADD CONSTRAINT FK_USER_TO_REPLY_LIKE_1 FOREIGN KEY (
	USER_ID
)
REFERENCES USER (
	USER_ID
);

ALTER TABLE REPLY_ZZIM ADD CONSTRAINT FK_REPLY_TO_REPLY_ZZIM_1 FOREIGN KEY (
	REPLY_NO
)
REFERENCES REPLY (
	REPLY_NO
);

ALTER TABLE REPLY_ZZIM ADD CONSTRAINT FK_USER_TO_REPLY_ZZIM_1 FOREIGN KEY (
	USER_ID
)
REFERENCES USER (
	USER_ID
);

ALTER TABLE REPLY_COMMENT ADD CONSTRAINT FK_REPLY_TO_REPLY_COMMENT_1 FOREIGN KEY (
	REPLY_NO
)
REFERENCES REPLY (
	REPLY_NO
);

ALTER TABLE REPLY_COMMENT ADD CONSTRAINT FK_USER_TO_REPLY_COMMENT_1 FOREIGN KEY (
	USER_ID
)
REFERENCES USER (
	USER_ID
);

