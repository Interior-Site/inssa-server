name: deploy-to-aws-server

on:
  workflow_run:
    workflows: ["ci"]
    types:
      - completed
  workflow_dispatch:

jobs:
  build:
    name: build-and-deploy-jar
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set yaml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application.yaml
        env:
          spring.datasource.jdbc-url: jdbc:mariadb://${{ secrets.INSSA_DATABASE }}?serverTimezone=Asia/Seoul
          spring.datasource.username: ${{ secrets.INSSA_DATABASE_USER }}
          spring.datasource.password: ${{ secrets.INSSA_DATABASE_PASSWORD }}
          jwt.secret: ${{ secrets.JWT_SECRET }}



      - name: Revive gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build bootJar
        run: ./gradlew bootJar

      # 도커로 jar 파일 빌드
      - name: Set up Docker Buildx # 도커 buildx: 도커 빌더로 moby buildkit을 사용하게 해주는 CLI 플러그인
        run: |
          docker buildx build --platform linux/amd64 -t inssa/inssa-api:latest .

      - name: Docker Save tar
        run: |
          docker save -o inssa-api.tar inssa/inssa-api:latest
          chmod 777 inssa-api.tar

      - name: Copy File
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.INSSA_AWS_SERVER_HOST }}
          username: ec2-user
          key: ${{ secrets.INSSA_AWS_SSH_KEY }}
          port: ${{ secrets.INSSA_AWS_SERVER_PORT }}
          source: "inssa-api.tar"
          target: "/home/ec2-user/inssa/images"

      - name: Restart Docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.INSSA_AWS_SERVER_HOST }}
          username: ec2-user
          key: ${{ secrets.INSSA_AWS_SSH_KEY }}
          port: ${{ secrets.INSSA_AWS_SERVER_PORT }}
          script: |
            cd /home/ec2-user/inssa
            docker load -i ./images/inssa-api.tar
            docker-compose down
            docker-compose up -d

      - name: Backend Deploy Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: ${{ success() }}
        with:
          title: ✅ Backend Deploy success ✅
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          color: 00FF00

      - name: Backend Deploy Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: ${{ failure() }}
        with:
          title: ❗️  Backend Deploy failed ❗️
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          color: FF0000
